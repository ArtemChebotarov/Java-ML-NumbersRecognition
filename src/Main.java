import javax.swing.*;public class Main {    static double[][] nums = {  {0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0},//0            {1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0},            {0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0},            {1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0},            {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0},//1            {0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0},            {0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0},            {1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0},//2            {1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0},            {1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0},//3            {1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0},            {1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0},//4            {1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0},            {1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0},            {1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0},//5            {1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0},            {1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0},//6            {1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0},            {1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},//7            {1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},            {0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0},//8            {1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0},            {0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0},//9            {1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0}    };    double[][] daneOczekiwane = { {0.0,0.0,0.0,0.0},//0            {0.0,0.0,0.0,0.0},            {0.0,0.0,0.0,0.0},            {0.0,0.0,0.0,0.0},            {0.0,0.0,0.0,1.0},//1            {0.0,0.0,0.0,1.0},            {0.0,0.0,0.0,1.0},            {0.0,0.0,1.0,0.0},//2            {0.0,0.0,1.0,0.0},            {0.0,0.0,1.0,1.0},//3            {0.0,0.0,1.0,1.0},            {0.0,1.0,0.0,0.0},//4            {0.0,1.0,0.0,0.0},            {0.0,1.0,0.0,0.0},            {0.0,1.0,0.0,1.0},//5            {0.0,1.0,0.0,1.0},            {0.0,1.0,1.0,0.0},//6            {0.0,1.0,1.0,0.0},            {0.0,1.0,1.0,1.0},//7            {0.0,1.0,1.0,1.0},            {1.0,0.0,0.0,0.0},//8            {1.0,0.0,0.0,0.0},            {1.0,0.0,0.0,1.0},//9            {1.0,0.0,0.0,1.0}};    double[][] daneOtrzymaneUkr = new double[24][14];    double[][] daneOtrzymaneWyj = new double[24][4];    static double[][] wagiWyj = new double[4][15];    static double[][] wagiUkr = new double[14][25];    double[][] bledUkr = new double[24][14];    double[][] bledWyj = new double[24][4];    public static void main(String[] args) {        Main main = new Main();        main.randomWagi();        main.teach();        SwingUtilities.invokeLater(()->  new MainWindow(wagiWyj, wagiUkr));    }    /* Metoda randomWagi() ustala początkowe losowe wagi dla rozpoczęcia uczenia */    public void randomWagi() {        for(int i = 0; i < wagiWyj.length; i++) {            for (int j = 0; j < wagiWyj[i].length; j++) {                wagiWyj[i][j] = Math.random();            }        }        for(int i = 0; i < wagiUkr.length; i++) {            for (int j = 0; j < wagiUkr[i].length; j++) {                wagiUkr[i][j] = Math.random();            }        }    }    /* Celą metody teach() jest ustalenie wektora na hyperpłaszczyźnie, który będze oddzielał jedne wartości od innych*/    public void teach() {        double bladSieci = 0;        double net;        double y;        int epoki = 0;        do{            epoki++;            for(int i = 0; i < nums.length; i++) {                for (int j = 0; j < wagiUkr.length; j++) {                    net = 0;                    for (int m = 0; m < wagiUkr[j].length-1; m++) {                        net += wagiUkr[j][m] * nums[i][m];                    }                    net += wagiUkr[j][24];                    daneOtrzymaneUkr[i][j] = sigmoFun(net);                }                for (int j = 0; j < wagiWyj.length; j++) {                    net = 0;                    for (int m = 0; m< wagiWyj[j].length-1; m++) {                        net += wagiWyj[j][m] * daneOtrzymaneUkr[i][m];                    }                    net += wagiWyj[j][14];                    daneOtrzymaneWyj[i][j] = sigmoFun(net);                }            }            searchErrors();            zmienWagi();            for (int i = 0; i < daneOtrzymaneWyj.length; i++) {                for (int j = 0; j < daneOtrzymaneWyj[i].length; j++) {                    bladSieci += Math.pow(daneOczekiwane[i][j] - daneOtrzymaneWyj[i][j], 2);                }            }            bladSieci /= 2;            System.out.println(bladSieci);        } while (bladSieci >= 0.01);        System.out.println(epoki);    }    public static double sigmoFun(double net) {        return 1/(1 + Math.pow(Math.E, -net));    }    //e = (d-y)*f'(net) - dla warstwy wyjsciowej  f'(net) = f(net)*(1-f(net)) - unipolarna     f'(net) = lambda/2*(1-f^2(net))    //e = sum(Wi * Ei) * f'(net) - dla warstwy ukrytej    public void searchErrors() {        double e;        for (int i = 0; i < daneOczekiwane.length; i++) {            for(int j = 0; j < daneOczekiwane[i].length; j++) {                e = (daneOczekiwane[i][j] - daneOtrzymaneWyj[i][j]) * daneOtrzymaneWyj[i][j] * (1 - daneOtrzymaneWyj[i][j]);                bledWyj[i][j] = e;            }        }        for (int i = 0; i < nums.length; i++) {            for (int j = 0; j < wagiUkr.length; j++) {                double sum = 0;                for (int m = 0; m < wagiWyj.length; m++) {                    sum += wagiWyj[m][j] * bledWyj[i][m];                }                double E = sum *(daneOtrzymaneUkr[i][j] * (1-daneOtrzymaneUkr[i][j]));                bledUkr[i][j] = E;            }        }    }    //w' = w + alpha * bled * X    public void zmienWagi() {        for (int m = 0; m < nums.length; m++) {            for (int i = 0; i < wagiUkr.length; i++) {                for (int j = 0; j < wagiUkr[i].length-1; j++) {                    wagiUkr[i][j] = wagiUkr[i][j] + (0.5 * bledUkr[m][i] * nums[m][j]);                }                wagiUkr[i][24] = wagiUkr[i][24] + (0.5 * bledUkr[m][i]);            }            for (int i = 0; i < wagiWyj.length; i++) {                for (int j = 0; j < wagiWyj[i].length-1; j++) {                    wagiWyj[i][j] = wagiWyj[i][j] + (0.5 * bledWyj[m][i] * daneOtrzymaneUkr[m][j]);                }                wagiWyj[i][13] = wagiWyj[i][14] + (0.5 * bledWyj[m][i]);            }        }    }}